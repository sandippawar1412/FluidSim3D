In file included from viennacl/linalg/ilu.hpp:24:0,
                 from FluidSim.h:19,
                 from FluidSim.cpp:6:
./viennacl/forwards.h: In static member function ‘static void viennacl::tools::MATRIX_ITERATOR_INCREMENTER<ROWCOL, MATRIXTYPE>::apply(const MATRIXTYPE&, unsigned int&, unsigned int&)’:
./viennacl/forwards.h:133:99: warning: typedef ‘ErrorIndicator’ locally defined but not used [-Wunused-local-typedefs]
           typedef typename MATRIXTYPE::ERROR_SPECIALIZATION_FOR_THIS_MATRIX_TYPE_MISSING          ErrorIndicator;
                                                                                                   ^
In file included from FluidSim.h:22:0,
                 from FluidSim.cpp:6:
viennacl/linalg/cg.hpp: In instantiation of ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’:
FluidSim.cpp:455:50:   required from here
viennacl/linalg/cg.hpp:99:66: error: no matching function for call to ‘inner_prod(const boost::numeric::ublas::vector<float>&, const boost::numeric::ublas::vector<float>&)’
       CPU_ScalarType ip_rr = viennacl::linalg::inner_prod(rhs,rhs);
                                                                  ^
viennacl/linalg/cg.hpp:99:66: note: candidates are:
In file included from viennacl/linalg/cg.hpp:29:0,
                 from FluidSim.h:22,
                 from FluidSim.cpp:6:
./viennacl/linalg/inner_prod.hpp:122:5: note: template<class VectorT1, class VectorT2> typename VectorT1::value_type viennacl::linalg::inner_prod(const VectorT1&, const VectorT2&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*)
     inner_prod(VectorT1 const& v1, VectorT2 const& v2, 
     ^
./viennacl/linalg/inner_prod.hpp:122:5: note:   template argument deduction/substitution failed:
./viennacl/linalg/inner_prod.hpp: In substitution of ‘template<class VectorT1, class VectorT2> typename VectorT1::value_type viennacl::linalg::inner_prod(const VectorT1&, const VectorT2&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*) [with VectorT1 = boost::numeric::ublas::vector<float>; VectorT2 = boost::numeric::ublas::vector<float>]’:
viennacl/linalg/cg.hpp:99:66:   required from ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/inner_prod.hpp:122:5: error: no type named ‘type’ in ‘struct viennacl::tools::enable_if<false, void>’
viennacl/linalg/cg.hpp: In instantiation of ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’:
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/inner_prod.hpp:142:5: note: template<class ScalarType, unsigned int alignment1, unsigned int alignment2> viennacl::scalar_expression<const viennacl::vector<SCALARTYPE, ALIGNMENT>, const viennacl::vector<SCALARTYPE, VECTOR_ALIGNMENT>, viennacl::op_inner_prod> viennacl::linalg::inner_prod(const viennacl::vector<SCALARTYPE, ALIGNMENT>&, const viennacl::vector<SCALARTYPE, VECTOR_ALIGNMENT>&, typename viennacl::tools::enable_if<viennacl::is_viennacl<typename viennacl::traits::tag_of<viennacl::vector<SCALARTYPE, ALIGNMENT> >::type>::value>::type*)
     inner_prod(viennacl::vector<ScalarType, alignment1> const & vector1, viennacl::vector<ScalarType, alignment2> const & vector2, 
     ^
./viennacl/linalg/inner_prod.hpp:142:5: note:   template argument deduction/substitution failed:
In file included from FluidSim.h:22:0,
                 from FluidSim.cpp:6:
viennacl/linalg/cg.hpp:99:66: note:   ‘const boost::numeric::ublas::vector<float>’ is not derived from ‘const viennacl::vector<SCALARTYPE, ALIGNMENT>’
       CPU_ScalarType ip_rr = viennacl::linalg::inner_prod(rhs,rhs);
                                                                  ^
viennacl/linalg/cg.hpp:110:47: error: no matching function for call to ‘prod(const boost::numeric::ublas::compressed_matrix<float>&, boost::numeric::ublas::vector<float>&)’
         tmp = viennacl::linalg::prod(matrix, p);
                                               ^
viennacl/linalg/cg.hpp:110:47: note: candidates are:
In file included from viennacl/linalg/cg.hpp:28:0,
                 from FluidSim.h:22,
                 from FluidSim.cpp:6:
./viennacl/linalg/prod.hpp:125:5: note: template<class MatrixT, class VectorT> VectorT viennacl::linalg::prod(const MatrixT&, const VectorT&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*)
     prod(MatrixT const& matrix, VectorT const& vector, 
     ^
./viennacl/linalg/prod.hpp:125:5: note:   template argument deduction/substitution failed:
./viennacl/linalg/prod.hpp: In substitution of ‘template<class MatrixT, class VectorT> VectorT viennacl::linalg::prod(const MatrixT&, const VectorT&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*) [with MatrixT = boost::numeric::ublas::compressed_matrix<float>; VectorT = boost::numeric::ublas::vector<float>]’:
viennacl/linalg/cg.hpp:110:47:   required from ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/prod.hpp:125:5: error: no type named ‘type’ in ‘struct viennacl::tools::enable_if<false, void>’
viennacl/linalg/cg.hpp: In instantiation of ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’:
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/prod.hpp:140:5: note: template<class MatrixT, class NumericT, unsigned int ALIGNMENT> viennacl::vector_expression<const MatrixT, const viennacl::vector<ScalarType, A>, viennacl::op_prod> viennacl::linalg::prod(const MatrixT&, const viennacl::vector<ScalarType, A>&, typename viennacl::tools::enable_if<viennacl::is_viennacl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*)
     prod(MatrixT const& matrix,
     ^
./viennacl/linalg/prod.hpp:140:5: note:   template argument deduction/substitution failed:
In file included from FluidSim.h:22:0,
                 from FluidSim.cpp:6:
viennacl/linalg/cg.hpp:110:47: note:   ‘boost::numeric::ublas::vector<float>’ is not derived from ‘const viennacl::vector<ScalarType, A>’
         tmp = viennacl::linalg::prod(matrix, p);
                                               ^
In file included from viennacl/linalg/cg.hpp:28:0,
                 from FluidSim.h:22,
                 from FluidSim.cpp:6:
./viennacl/linalg/prod.hpp:153:5: note: template<class MatrixT, class NumericT, class F, unsigned int ALIGNMENT> viennacl::matrix_expression<const MatrixT, const viennacl::matrix<NumericT, F, ALIGNMENT>, viennacl::op_prod> viennacl::linalg::prod(const MatrixT&, const viennacl::matrix<NumericT, F, ALIGNMENT>&, typename viennacl::tools::enable_if<viennacl::is_viennacl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*)
     prod(MatrixT const& matrix_A,
     ^
./viennacl/linalg/prod.hpp:153:5: note:   template argument deduction/substitution failed:
In file included from FluidSim.h:22:0,
                 from FluidSim.cpp:6:
viennacl/linalg/cg.hpp:110:47: note:   ‘boost::numeric::ublas::vector<float>’ is not derived from ‘const viennacl::matrix<NumericT, F, ALIGNMENT>’
         tmp = viennacl::linalg::prod(matrix, p);
                                               ^
In file included from viennacl/linalg/cg.hpp:28:0,
                 from FluidSim.h:22,
                 from FluidSim.cpp:6:
./viennacl/linalg/prod.hpp:170:5: note: template<class MatrixT, class NumericT, class F, unsigned int ALIGNMENT> viennacl::matrix_expression<const MatrixT, const viennacl::matrix_expression<const viennacl::matrix<NumericT, F, ALIGNMENT>, const viennacl::matrix<NumericT, F, ALIGNMENT>, viennacl::op_trans>, viennacl::op_prod> viennacl::linalg::prod(const MatrixT&, const viennacl::matrix_expression<const viennacl::matrix<NumericT, F, ALIGNMENT>, const viennacl::matrix<NumericT, F, ALIGNMENT>, viennacl::op_trans>&, typename viennacl::tools::enable_if<viennacl::is_viennacl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*)
     prod(MatrixT const& matrix_A,
     ^
./viennacl/linalg/prod.hpp:170:5: note:   template argument deduction/substitution failed:
In file included from FluidSim.h:22:0,
                 from FluidSim.cpp:6:
viennacl/linalg/cg.hpp:110:47: note:   ‘boost::numeric::ublas::vector<float>’ is not derived from ‘const viennacl::matrix_expression<const viennacl::matrix<NumericT, F, ALIGNMENT>, const viennacl::matrix<NumericT, F, ALIGNMENT>, viennacl::op_trans>’
         tmp = viennacl::linalg::prod(matrix, p);
                                               ^
viennacl/linalg/cg.hpp:113:55: error: no matching function for call to ‘inner_prod(boost::numeric::ublas::vector<float>&, boost::numeric::ublas::vector<float>&)’
         tmp_in_p = viennacl::linalg::inner_prod(tmp, p);
                                                       ^
viennacl/linalg/cg.hpp:113:55: note: candidates are:
In file included from viennacl/linalg/cg.hpp:29:0,
                 from FluidSim.h:22,
                 from FluidSim.cpp:6:
./viennacl/linalg/inner_prod.hpp:122:5: note: template<class VectorT1, class VectorT2> typename VectorT1::value_type viennacl::linalg::inner_prod(const VectorT1&, const VectorT2&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*)
     inner_prod(VectorT1 const& v1, VectorT2 const& v2, 
     ^
./viennacl/linalg/inner_prod.hpp:122:5: note:   template argument deduction/substitution failed:
./viennacl/linalg/inner_prod.hpp: In substitution of ‘template<class VectorT1, class VectorT2> typename VectorT1::value_type viennacl::linalg::inner_prod(const VectorT1&, const VectorT2&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*) [with VectorT1 = boost::numeric::ublas::vector<float>; VectorT2 = boost::numeric::ublas::vector<float>]’:
viennacl/linalg/cg.hpp:113:55:   required from ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/inner_prod.hpp:122:5: error: no type named ‘type’ in ‘struct viennacl::tools::enable_if<false, void>’
viennacl/linalg/cg.hpp: In instantiation of ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’:
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/inner_prod.hpp:142:5: note: template<class ScalarType, unsigned int alignment1, unsigned int alignment2> viennacl::scalar_expression<const viennacl::vector<SCALARTYPE, ALIGNMENT>, const viennacl::vector<SCALARTYPE, VECTOR_ALIGNMENT>, viennacl::op_inner_prod> viennacl::linalg::inner_prod(const viennacl::vector<SCALARTYPE, ALIGNMENT>&, const viennacl::vector<SCALARTYPE, VECTOR_ALIGNMENT>&, typename viennacl::tools::enable_if<viennacl::is_viennacl<typename viennacl::traits::tag_of<viennacl::vector<SCALARTYPE, ALIGNMENT> >::type>::value>::type*)
     inner_prod(viennacl::vector<ScalarType, alignment1> const & vector1, viennacl::vector<ScalarType, alignment2> const & vector2, 
     ^
./viennacl/linalg/inner_prod.hpp:142:5: note:   template argument deduction/substitution failed:
In file included from FluidSim.h:22:0,
                 from FluidSim.cpp:6:
viennacl/linalg/cg.hpp:113:55: note:   ‘boost::numeric::ublas::vector<float>’ is not derived from ‘const viennacl::vector<SCALARTYPE, ALIGNMENT>’
         tmp_in_p = viennacl::linalg::inner_prod(tmp, p);
                                                       ^
viennacl/linalg/cg.hpp:119:79: error: no matching function for call to ‘inner_prod(boost::numeric::ublas::vector<float>&, boost::numeric::ublas::vector<float>&)’
         residual_norm_squared = viennacl::linalg::inner_prod(residual,residual);
                                                                               ^
viennacl/linalg/cg.hpp:119:79: note: candidates are:
In file included from viennacl/linalg/cg.hpp:29:0,
                 from FluidSim.h:22,
                 from FluidSim.cpp:6:
./viennacl/linalg/inner_prod.hpp:122:5: note: template<class VectorT1, class VectorT2> typename VectorT1::value_type viennacl::linalg::inner_prod(const VectorT1&, const VectorT2&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*)
     inner_prod(VectorT1 const& v1, VectorT2 const& v2, 
     ^
./viennacl/linalg/inner_prod.hpp:122:5: note:   template argument deduction/substitution failed:
./viennacl/linalg/inner_prod.hpp: In substitution of ‘template<class VectorT1, class VectorT2> typename VectorT1::value_type viennacl::linalg::inner_prod(const VectorT1&, const VectorT2&, typename viennacl::tools::enable_if<viennacl::is_stl<typename viennacl::traits::tag_of<MatrixT>::type>::value>::type*) [with VectorT1 = boost::numeric::ublas::vector<float>; VectorT2 = boost::numeric::ublas::vector<float>]’:
viennacl/linalg/cg.hpp:119:79:   required from ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/inner_prod.hpp:122:5: error: no type named ‘type’ in ‘struct viennacl::tools::enable_if<false, void>’
viennacl/linalg/cg.hpp: In instantiation of ‘VectorType viennacl::linalg::solve(const MatrixType&, const VectorType&, const viennacl::linalg::cg_tag&) [with MatrixType = boost::numeric::ublas::compressed_matrix<float>; VectorType = boost::numeric::ublas::vector<float>]’:
FluidSim.cpp:455:50:   required from here
./viennacl/linalg/inner_prod.hpp:142:5: note: template<class ScalarType, unsigned int alignment1, unsigned int alignment2> viennacl::scalar_expression<const viennacl::vector<SCALARTYPE, ALIGNMENT>, const viennacl::vector<SCALARTYPE, VECTOR_ALIGNMENT>, viennacl::op_inner_prod> viennacl::linalg::inner_prod(const viennacl::vector<SCALARTYPE, ALIGNMENT>&, const viennacl::vector<SCALARTYPE, VECTOR_ALIGNMENT>&, typename viennacl::tools::enable_if<viennacl::is_viennacl<typename viennacl::traits::tag_of<viennacl::vector<SCALARTYPE, ALIGNMENT> >::type>::value>::type*)
     inner_prod(viennacl::vector<ScalarType, alignment1> const & vector1, viennacl::vector<ScalarType, alignment2> const & vector2, 
     ^
./viennacl/linalg/inner_prod.hpp:142:5: note:   template argument deduction/substitution failed:
In file included from FluidSim.h:22:0,
                 from FluidSim.cpp:6:
viennacl/linalg/cg.hpp:119:79: note:   ‘boost::numeric::ublas::vector<float>’ is not derived from ‘const viennacl::vector<SCALARTYPE, ALIGNMENT>’
         residual_norm_squared = viennacl::linalg::inner_prod(residual,residual);
                                                                               ^
make: *** [FluidSim.o] Error 1
